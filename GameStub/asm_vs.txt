
vs_3_0

dcl_2d s0;//s0:MatrixMap;
dcl_position0 v0;
dcl_normal v1;
dcl_texcoord0 v2;
dcl_blendindices v3;
dcl_blendweight v4;

dcl_position0 o0;
dcl_color0 o1;
dcl_texcoord0 o2;
//常数----->>>>
def	c0, 0.0, 1.0, 0.0001, 3.0;
def c1, 0.125, 0.375, 0.625, 0.875;
//<<<<<-----常数

//c32-c35 MatrixViewPorjection
//c36 LightVec
//defi i0,4,0,1,0;
defi i0,1,0,0,0;//i0.x 用于rep
mov o2,v2;	//outp.uv=inp.uv
mov o0.xyzw,c0.xxxy;
mov r0.xyzw,c0.xxxy;   //r0:vertex position in world space
mov r1.xyzw,c0.xxxx;   //r1:vertex normal in world space (not normalized)




mov r31.x,c0.y;	//r31.x:Unused weight



//第一次========>>>>>>>
//r2:uv
mov r2.y,    v3.x      ;
mov r2.zw,c0.xy;
//r4-r7:Matrix to world space
//Reading the transform------->>>>>>>
mov r2.x,c1.x;
texldl r4,r2,s0;

mov r2.x,c1.y;
texldl r5,r2,s0;

mov r2.x,c1.z;
texldl r6,r2,s0;

mov r2.x,c1.w;
texldl r7,r2,s0;
//<<<<<<<<<<<<----------
//r3:temporary
m4x3 r3.xyz,v0,r4;//Transform the position
mad r0.xyz,r3.xyz,  v4.xxx    ,r0.xyz;//Blend the position
m3x3 r3.xyz,v1.xyz,r4;//Transform the normal
mad r1.xyz,r3.xyz,  v4.xxx    ,r1.xyz;//Blend the normal   
sub r31.x,r31.x,	v4.x	//subtract used weight-------->>>>>>

if_gt r31.x,c0.z;
	//第二次========>>>>>>>
	//r2:uv
	mov r2.y,    v3.y      ;
	mov r2.zw,c0.xy;
	//r4-r7:Matrix to world space
	//Reading the transform------->>>>>>>
	mov r2.x,c1.x;
	texldl r4,r2,s0;

	mov r2.x,c1.y;
	texldl r5,r2,s0;

	mov r2.x,c1.z;
	texldl r6,r2,s0;

	mov r2.x,c1.w;
	texldl r7,r2,s0;
	//<<<<<<<<<<<<----------
	//r3:temporary
	m4x3 r3.xyz,v0,r4;//Transform the position
	mad r0.xyz,r3.xyz,  v4.yyy    ,r0.xyz;//Blend the position
	m3x3 r3.xyz,v1.xyz,r4;//Transform the normal
	mad r1.xyz,r3.xyz,  v4.yyy    ,r1.xyz;//Blend the normal   
	sub r31.x,r31.x,	v4.y	//subtract used weight-------->>>>>>

	if_gt r31.x,c0.z;
		//第三次========>>>>>>>
		//r2:uv
		mov r2.y,    v3.z      ;
		mov r2.zw,c0.xy;
		//r4-r7:Matrix to world space
		//Reading the transform------->>>>>>>
		mov r2.x,c1.x;
		texldl r4,r2,s0;

		mov r2.x,c1.y;
		texldl r5,r2,s0;

		mov r2.x,c1.z;
		texldl r6,r2,s0;

		mov r2.x,c1.w;
		texldl r7,r2,s0;
		//<<<<<<<<<<<<----------
		//r3:temporary
		m4x3 r3.xyz,v0,r4;//Transform the position
		mad r0.xyz,r3.xyz,  v4.zzz    ,r0.xyz;//Blend the position
		m3x3 r3.xyz,v1.xyz,r4;//Transform the normal
		mad r1.xyz,r3.xyz,  v4.zzz    ,r1.xyz;//Blend the normal   
		sub r31.x,r31.x,	v4.z	//subtract used weight-------->>>>>>

		if_gt r31.x,c0.z;
			//第四次========>>>>>>>
			//r2:uv
			mov r2.y,    v3.w      ;
			mov r2.zw,c0.xy;
			//r4-r7:Matrix to world space
			//Reading the transform------->>>>>>>
			mov r2.x,c1.x;
			texldl r4,r2,s0;

			mov r2.x,c1.y;
			texldl r5,r2,s0;

			mov r2.x,c1.z;
			texldl r6,r2,s0;

			mov r2.x,c1.w;
			texldl r7,r2,s0;
			//<<<<<<<<<<<<----------
			//r3:temporary
			m4x3 r3.xyz,v0,r4;//Transform the position
			mad r0.xyz,r3.xyz,  v4.www    ,r0.xyz;//Blend the position
			m3x3 r3.xyz,v1.xyz,r4;//Transform the normal
			mad r1.xyz,r3.xyz,  v4.www    ,r1.xyz;//Blend the normal   
			sub r31.x,r31.x,	v4.w	//subtract used weight-------->>>>>>

		endif;
	endif;
endif;
//<<<<<<<-----------




//Compute the color and output it-------->>>>>>>>>>>
nrm r3.xyz,r1; //r3:normalized normal
dp3 o1.xyz,r3,c36; //r3 is free again
mov o1.w,c0.y;
//<<<<<<<<<<--------------


//Transform the position into homogeneous space and output it--------->>>>>>>>>
m4x4 o0,r0,c32;
//<<<<<<<<<<<<<<------------------

//debug------->>>>>>>
//mov o1.xyzw,c0.yyyy
//m4x4 o0,v0,c32;
//mov o0,v0;
//<<<<<<<<<----------
