/*********************************************************************NVMH3****
*******************************************************************************
$Revision: #3 $

Copyright NVIDIA Corporation 2008
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY
LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

% Uses a texture map as a high-speed lookup, so that complex anisotropic 
% highlights can be displayed in real time. This new version of the effect
% generates its own anisotropy map, and is compatible with both FX Composer
% and EffectEdit.

keywords: material 
date: 070301



To learn more about shading, shaders, and to bounce ideas off other shader
    authors and users, visit the NVIDIA Shader Library Forums at:

    http://developer.nvidia.com/forums/

*******************************************************************************
******************************************************************************/

/*****************************************************************/
/*** HOST APPLICATION IDENTIFIERS ********************************/
/*** Potentially predefined by varying host environments *********/
/*****************************************************************/

// #define _XSI_		/* predefined when running in XSI */

#ifndef FXCOMPOSER_VERSION	/* for very old versions */
#define FXCOMPOSER_VERSION 180
#endif /* FXCOMPOSER_VERSION */

// #define FLIP_TEXTURE_Y	/* Different in OpenGL & DirectX */

/*****************************************************************/
/*** EFFECT-SPECIFIC CODE BEGINS HERE ****************************/
/*****************************************************************/

// #define  VERTEX_SHADED

/******* Lighting Macros *******/
/** To use "Object-Space" lighting definitions, change these two macros: **/
#define LIGHT_COORDS "World"
// #define OBJECT_SPACE_LIGHTS /* Define if LIGHT_COORDS is "Object" */
/** Define the macro USE_SHARED_SHADOW to permit the import and use of "shared
		surface "shadow maps created by COLLADA-FX. **/
// #define USE_SHARED_SHADOW

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Main;";
> = 0.8;

/**** UNTWEAKABLES: Hidden & Automatically-Tracked Parameters **********/

// transform object vertices to world-space:
float4x4 gWorldXf : World < string UIWidget="None"; >;
// transform object normals, tangents, & binormals to world-space:
float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
// transform object vertices to view space and project them in perspective:
float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;
// provide tranform from "view" or "eye" coords back to world-space:
float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;

// TWEAKABLES /////////////

float3 gLamp0Pos : POSITION <
    string Object = "PointLight0";
    string UIName =  "Lamp 0 Position";
    string Space = (LIGHT_COORDS);
> = {-0.5f,2.0f,1.25f};

//// 2D Texture used for Aniso ////

texture gAnisoTexture <
    string ResourceName = "Aniso2.dds";
    string UIName = "AnisotropiC Lookup Texture";
    string Type = "2D";
>;

sampler2D gAnisoSampler = sampler_state
{
    Texture = <gAnisoTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};

/////////// structs //////////////

struct appdata {
    float3 Position : POSITION;
    float4 Normal : NORMAL;
};

struct anisoVertexOutput {
    float4 HPosition : POSITION;
    float2 TexCoord0 : TEXCOORD0;
    float3 WorldNormal : TEXCOORD1;
    float3 WorldView : TEXCOORD2;
    float3 LightVec : TEXCOORD3;
};

/////// vertex shader does all the work

anisoVertexOutput anisoVS(appdata IN,
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
	uniform float3 LampPos
) {
    anisoVertexOutput OUT = (anisoVertexOutput)0;
    float3 Nn = normalize(mul(WorldITXf,IN.Normal).xyz);
    float4 Po = float4(IN.Position.xyz,1.0);
    float3 Pw = mul(WorldXf,Po).xyz;
    float3 Vn = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);
    float3 Ln = normalize(LampPos - Pw);
    OUT.WorldNormal = Nn;
    OUT.WorldView = Vn;
    OUT.LightVec = Ln;
    float3 Hn = normalize(Vn + Ln);
    OUT.TexCoord0 = float2(dot(Ln, Nn), dot(Hn, Nn));
    OUT.HPosition = mul(WvpXf,Po);
    return OUT;
}

float4 anisoPS(anisoVertexOutput IN,
		uniform sampler2D AnisoSampler
) : COLOR {
#ifdef VERTEX_SHADED
    return tex2D(AnisoSampler,IN.TexCoord0.xy);
#else /* ! VERTEX_SHADED */
    float3 Nn = normalize(IN.WorldNormal);
    float3 Vn = normalize(IN.WorldView);
    float3 Ln = normalize(IN.LightVec);
    float3 Hn = normalize(Vn + Ln);
    float2 uv = float2(dot(Ln, Nn), dot(Hn, Nn));
    return tex2D(AnisoSampler,uv);
#endif /* ! VERTEX_SHADED */
}

///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

technique Main <
	string Script = "Pass=p0;";
> {
    pass p0 <
	string Script = "Draw=geometry;";
    > {
        VertexProgram = compile vp40 anisoVS(gWorldITXf,gWorldXf,
				gViewIXf,gWvpXf,gLamp0Pos);
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = false;
		BlendEnable = false;
		DepthFunc = LEqual;
        FragmentProgram = compile fp40 anisoPS(gAnisoSampler);
    }
}

// eof
